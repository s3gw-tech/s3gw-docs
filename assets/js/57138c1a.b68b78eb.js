"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[318],{5196:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>r,default:()=>a,frontMatter:()=>o,metadata:()=>c,toc:()=>h});var t=n(4848),i=n(8453);const o={},r="Testing s3gw",c={id:"testing",title:"Testing s3gw",description:"In this directory you can find scripts to test s3gw in several different",source:"@site/../s3gw/docs/guide/testing.md",sourceDirName:".",slug:"/testing",permalink:"/testing",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Developing the S3 Gateway",permalink:"/developing"},next:{title:"S3gw UI",permalink:"/ui"}},d={},h=[{value:"Smoke tests",id:"smoke-tests",level:2},{value:"S3 tests",id:"s3-tests",level:2},{value:"Creating reports",id:"creating-reports",level:3},{value:"Benchmarking",id:"benchmarking",level:2},{value:"Stress testing",id:"stress-testing",level:2}];function l(e){const s={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h1,{id:"testing-s3gw",children:"Testing s3gw"}),"\n",(0,t.jsxs)(s.p,{children:["In this directory you can find scripts to test ",(0,t.jsx)(s.code,{children:"s3gw"})," in several different\nways. Below is a description of each type of test."]}),"\n",(0,t.jsxs)(s.p,{children:["However, note that each test requires an existing gateway running somewhere\naccessible by the tests. This may be an ",(0,t.jsx)(s.code,{children:"s3gw"})," container, or a ",(0,t.jsx)(s.code,{children:"radosgw"})," running\nfrom a source repository. It doesn't matter whether these running on the local\nmachine or on a remote host, as long as they are accessible to the tests."]}),"\n",(0,t.jsx)(s.h2,{id:"smoke-tests",children:"Smoke tests"}),"\n",(0,t.jsx)(s.p,{children:"Basic test battery to smoke out errors and potential regressions."}),"\n",(0,t.jsxs)(s.p,{children:["This script takes a mandatory argument in the form\n",(0,t.jsx)(s.code,{children:"ADDRESS[:PORT[/LOCATION]]"}),". For example, ",(0,t.jsx)(s.code,{children:"127.0.0.1:7480/s3gw"}),", where we know\nwe will be able to find the ",(0,t.jsx)(s.code,{children:"radosgw"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["At the moment, these tests mainly rely on ",(0,t.jsx)(s.code,{children:"s3cmd"}),", which requires to be\ninstalled and available in the ",(0,t.jsx)(s.code,{children:"PATH"}),"."]}),"\n",(0,t.jsx)(s.h2,{id:"s3-tests",children:"S3 tests"}),"\n",(0,t.jsxs)(s.p,{children:["Runs a comprehensive test battery against a running ",(0,t.jsx)(s.code,{children:"radosgw"}),". It relies on\n",(0,t.jsx)(s.a,{href:"https://github.com/ceph/s3-tests",children:"ceph/s3-tests"}),", and will clone this\nrepository for each test run."]}),"\n",(0,t.jsxs)(s.p,{children:["This script also takes a mandatory argument in the form ",(0,t.jsx)(s.code,{children:"HOST[:PORT]"}),", which\nmust be the address where the ",(0,t.jsx)(s.code,{children:"radosgw"})," can be found. ",(0,t.jsx)(s.code,{children:"PORT"})," defaults to\n",(0,t.jsx)(s.code,{children:"7480"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["Each run will be kept in a directory of the form ",(0,t.jsx)(s.code,{children:"s3gw-s3test-DATE-TESTID"}),".\nThe cloned ",(0,t.jsx)(s.code,{children:"ceph/s3-tests"})," repository, as well as logs, will be kept within\nthis directory."]}),"\n",(0,t.jsx)(s.h3,{id:"creating-reports",children:"Creating reports"}),"\n",(0,t.jsxs)(s.p,{children:["Test reports may be generated using the ",(0,t.jsx)(s.code,{children:"create-s3tests-report.sh"})," script.\nThis script requires the resulting log file from an ",(0,t.jsx)(s.code,{children:"s3gw-s3tests.sh"})," run."]}),"\n",(0,t.jsxs)(s.p,{children:["The report is a ",(0,t.jsx)(s.code,{children:"json"})," file containing relevant information about the run, and\nis meant to be shared via the\n",(0,t.jsx)(s.a,{href:"https://github.com/s3gw-tech/s3gw-status",children:"s3gw-tech/s3gw-status"}),"\nrepository (see more information on the ",(0,t.jsx)(s.a,{href:"https://github.com/s3gw-tech/s3gw-status#readme",children:"project's README\nfile"}),".)"]}),"\n",(0,t.jsxs)(s.p,{children:["Check ",(0,t.jsx)(s.code,{children:"create-s3tests-report.sh --help"})," for more information."]}),"\n",(0,t.jsx)(s.h2,{id:"benchmarking",children:"Benchmarking"}),"\n",(0,t.jsxs)(s.p,{children:["With tracking our improvement over time in mind, we are benchmarking\n",(0,t.jsx)(s.code,{children:"radosgw"})," with the file based backend ",(0,t.jsx)(s.code,{children:"simplefile"}),".\nThis allows us to identify potential performance regressions, as\nwell as understand whether the changes we're making are actually having an\nimpact, and at the desired scale."]}),"\n",(0,t.jsxs)(s.p,{children:["This script relies on ",(0,t.jsx)(s.a,{href:"https://github.com/minio/warp",children:"MinIO's warp tool"}),". To\nrun it will need this tool to be available on the user's ",(0,t.jsx)(s.code,{children:"PATH"}),". That means\nhaving it installed with ",(0,t.jsx)(s.code,{children:"go install github.com/minio/warp@latest"}),", and have\nthe ",(0,t.jsx)(s.code,{children:"GOPATH"})," (by default it should be ",(0,t.jsx)(s.code,{children:"~/go/bin"}),") in the user's ",(0,t.jsx)(s.code,{children:"PATH"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["This script also requires a ",(0,t.jsx)(s.code,{children:"HOST[:PORT]"})," parameter, similarly to the\nother tests so that ",(0,t.jsx)(s.code,{children:"warp"})," knows where to find the ",(0,t.jsx)(s.code,{children:"radosgw"})," being benchmarked."]}),"\n",(0,t.jsxs)(s.p,{children:["Additionally, this script takes one of three options: ",(0,t.jsx)(s.code,{children:"--large"}),", writing 6000\nobjects for 10 minutes; ",(0,t.jsx)(s.code,{children:"--medium"}),", writing 1000 objects for 5 minutes; and\n",(0,t.jsx)(s.code,{children:"--small"})," for 50 objects during 1 minute."]}),"\n",(0,t.jsxs)(s.p,{children:["The test will run ",(0,t.jsx)(s.code,{children:"wrap"})," 3 times, for object sizes of 1MiB, 10MiB, and 100MiB."]}),"\n",(0,t.jsxs)(s.p,{children:["Each time ",(0,t.jsx)(s.code,{children:"wrap"})," is run, a file will be created containing the results of\nthe benchmark. This file can later on be used to compare results between runs.\nFor more information, check ",(0,t.jsx)(s.code,{children:"warp"}),"'s help."]}),"\n",(0,t.jsx)(s.h2,{id:"stress-testing",children:"Stress testing"}),"\n",(0,t.jsxs)(s.p,{children:["For the purpose of stress testing ",(0,t.jsx)(s.code,{children:"s3gw"}),", you can rely on\n",(0,t.jsx)(s.a,{href:"https://github.com/axboe/fio",children:"fio"}),".\nThe tool is equipped with an HTTP client that can also act as an\n",(0,t.jsx)(s.code,{children:"S3"})," client.\nYou can therefore use the tool to issue concurrent and serial operations against\n",(0,t.jsx)(s.code,{children:"s3gw"}),".\nFor a basic stress testing activity you should normally want to shot a series\nof ",(0,t.jsx)(s.code,{children:"PUT"}),"(s), ",(0,t.jsx)(s.code,{children:"GET"}),"(s) and ",(0,t.jsx)(s.code,{children:"DELETE"}),"(s).\nSuch workload can be modeled with a fio ",(0,t.jsx)(s.em,{children:"jobfile"}),".\nFor example, you can customize the following ",(0,t.jsx)(s.em,{children:"jobfile"})," and tuning it to realize\nthe test you wish to perform."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ini",children:"[global]\nioengine=http\nfilename=/foo/obj\nhttp_verbose=0\nhttps=off\nhttp_mode=s3\nhttp_s3_key=test\nhttp_s3_keyid=test\nhttp_host=localhost:7480\n\n[s3-write]\nnumjobs=4\nrw=write\nsize=16m\nbs=16m\n\n[s3-read]\nnumjobs=4\nrw=read\nsize=16m\nbs=16m\n\n[s3-trim]\nstonewall\nnumjobs=1\nrw=trim\nsize=16m\nbs=16m\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Once you have created your ",(0,t.jsx)(s.em,{children:"jobfile"}),": ",(0,t.jsx)(s.code,{children:"s3gw.fio"})," you can launch\nthe workload with:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-shell",children:"$ fio s3gw.fio\nStarting 9 processes\n\n...\n"})}),"\n",(0,t.jsxs)(s.p,{children:["This ",(0,t.jsx)(s.em,{children:"jobfile"})," connects to an S3 gateway listening on ",(0,t.jsx)(s.code,{children:"localhost:7480"}),"\nand operates on a object ",(0,t.jsx)(s.code,{children:"obj"})," which resides inside an existing ",(0,t.jsx)(s.code,{children:"foo"})," bucket.\nThis example launches 3 types of jobs: ",(0,t.jsx)(s.code,{children:"s3-write"})," (PUT), ",(0,t.jsx)(s.code,{children:"s3-read"}),"\n(GET) and ",(0,t.jsx)(s.code,{children:"s3-trim"})," (DELETE); the actual operation verb is defined by ",(0,t.jsx)(s.code,{children:"rw"}),"\nproperty. The actual number of processes performing the same operation is\ncontrolled by ",(0,t.jsx)(s.code,{children:"numjobs"})," property.\n",(0,t.jsx)(s.code,{children:"global"})," section is inherited from all defined jobs."]}),"\n",(0,t.jsxs)(s.p,{children:["For this specific example the I/O activity is defined by: ",(0,t.jsx)(s.code,{children:"size=16m bs=16m"}),"\nmeaning that, a 16mb file will be ",(0,t.jsx)(s.code,{children:"write"}),", ",(0,t.jsx)(s.code,{children:"read"})," and ",(0,t.jsx)(s.code,{children:"trim"})," with a single\n16mb weighting I/O operation. As result of this, supposing that no ",(0,t.jsx)(s.code,{children:"trim"}),"\njob has been defined, you would find in the bucket a 16mb object:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-shell",children:"$ s3cmd ls s3://foo\n2022-07-19 13:14     16777216  s3://foo/obj_0_16777216\n"})}),"\n",(0,t.jsxs)(s.p,{children:["By modifying the ",(0,t.jsx)(s.code,{children:"bs"})," property to the value of ",(0,t.jsx)(s.code,{children:"4m"}),", you are diminishing\nthe weight of a single I/O operation over an overall ",(0,t.jsx)(s.code,{children:"16m"})," size.\nAs result of this, you would find 4 (16mb/4mb) single objects in the bucket:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-shell",children:"$ s3cmd ls s3://foo\n2022-07-19 13:21      4194304  s3://foo/obj_0_4194304\n2022-07-19 13:21      4194304  s3://foo/obj_12582912_4194304\n2022-07-19 13:21      4194304  s3://foo/obj_4194304_4194304\n2022-07-19 13:21      4194304  s3://foo/obj_8388608_4194304\n"})}),"\n",(0,t.jsxs)(s.p,{children:["To build more complex ",(0,t.jsx)(s.code,{children:"fio"})," workloads, refer to the\n",(0,t.jsx)(s.a,{href:"https://fio.readthedocs.io/en/latest/index.html",children:"documentation"}),"."]})]})}function a(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>c});var t=n(6540);const i={},o=t.createContext(i);function r(e){const s=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:s},e.children)}}}]);