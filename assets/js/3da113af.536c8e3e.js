"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2885],{6813:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var s=i(4848),t=i(8453);const o={},r="Developing the S3 Gateway",l={id:"developing",title:"Developing the S3 Gateway",description:"Introduction",source:"@site/../s3gw/docs/guide/developing.md",sourceDirName:".",slug:"/developing",permalink:"/developing",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"contributing",permalink:"/contributing"},next:{title:"Testing s3gw",permalink:"/testing"}},a={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Running the Gateway",id:"running-the-gateway",level:2},{value:"How to build your own containers",id:"how-to-build-your-own-containers",level:2},{value:"Building the s3gw container image",id:"building-the-s3gw-container-image",level:3},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Building the radosgw binary",id:"building-the-radosgw-binary",level:3},{value:"Build the s3gw container image",id:"build-the-s3gw-container-image",level:3},{value:"Running the s3gw container",id:"running-the-s3gw-container",level:3},{value:"Building the radosgw test binaries",id:"building-the-radosgw-test-binaries",level:3},{value:"Build the s3gw-test container image",id:"build-the-s3gw-test-container-image",level:3},{value:"Running the s3gw-test container",id:"running-the-s3gw-test-container",level:3},{value:"Building a s3gw-ui application image",id:"building-a-s3gw-ui-application-image",level:2},{value:"Conventions",id:"conventions",level:3},{value:"Prerequisites",id:"prerequisites-1",level:3},{value:"Build the application",id:"build-the-application",level:3},{value:"Running the application",id:"running-the-application",level:3},{value:"Configuration",id:"configuration",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"developing-the-s3-gateway",children:"Developing the S3 Gateway"}),"\n",(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsxs)(n.p,{children:["This project is exploring the use of Ceph's Rados Gateway (RGW) as a standalone\ndaemon with a non-RADOS storage backend. The backend, ",(0,s.jsx)(n.code,{children:"sfs"}),", is\nbacked by a SQLite database for metadata with files for object data, and is\ncurrently provided by RGW."]}),"\n",(0,s.jsxs)(n.p,{children:["In order to ensure tests are conducted from the same point in time, a forked\nversion of the latest development version of Ceph is available ",(0,s.jsx)(n.a,{href:"https://github.com/s3gw-tech/s3gw-ceph.git",children:"here"}),".\nThe team uses the ",(0,s.jsxs)(n.a,{href:"https://github.com/s3gw-tech/s3gw-ceph/tree/s3gw",children:[(0,s.jsx)(n.code,{children:"s3gw"})," branch"]})," as our base of reference."]}),"\n",(0,s.jsx)(n.p,{children:"Keep in mind that this development branch will closely follow Ceph's\nupstream main development branch, and is bound to change over time. We intend to\ncontribute whatever patches we come up with to the original project, thus we\nneed to keep up with its ever evolving state."}),"\n",(0,s.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,s.jsx)(n.p,{children:"We are relying on built Ceph sources to test RGW. We don't have a particular\npreference on how to achieve this. The team intends to standardize how\nto obtain the RGW binary, but that's not in the immediate plans. For now,\nthere are two key options available:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Containers to build these sources"}),"\n",(0,s.jsx)(n.li,{children:"Local OS"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["If you are new to Ceph development, the best way to find out how to build these\nsources is to refer to the ",(0,s.jsx)(n.a,{href:"https://docs.ceph.com/en/pacific/install/build-ceph/#id1",children:"original Ceph documentation"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"s3gw-tech/s3gw-ceph"})," repository  is a requirement for this project.\nWe can't guarantee that our instructions, or the project as a whole,\nwill work flawlessly with the original Ceph project from ",(0,s.jsx)(n.code,{children:"ceph/ceph"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"The team is in a fast development effort at the moment, patches to the\nCeph code are made against our own fork of the Ceph repository, allowing\nus to experiment with the Ceph source and not pollute the upstream Ceph\nrepository. We do intend to upstream any patches that make sense though."}),"\n",(0,s.jsxs)(n.p,{children:["We rely on ",(0,s.jsx)(n.code,{children:"s3cmd"}),", which can be found on ",(0,s.jsx)(n.a,{href:"https://github.com/s3tools/s3cmd",children:"Github"})," or obtained through ",(0,s.jsx)(n.code,{children:"pip"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"s3cmd"})," needs to be configured to talk to RGW. This can be achieved by\nfirst running ",(0,s.jsx)(n.code,{children:"s3cmd -c $(pwd)/.s3cfg --configure"}),". By default, the\nconfiguration file is put under the user's home directory, but for our\ntesting purposes we recommend to place it somewhere less intrusive."]}),"\n",(0,s.jsx)(n.h2,{id:"running-the-gateway",children:"Running the Gateway"}),"\n",(0,s.jsx)(n.p,{children:"To get a standalone Gateway running, follow these steps:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"cd build/\nmkdir -p dev/rgw.foo\nbin/radosgw -i foo -d --no-mon-config --debug-rgw 15 \\\n  --rgw-backend-store sfs \\\n  --rgw-data $(pwd)/dev/rgw.foo \\\n  --run-dir $(pwd)/dev/rgw.foo \\\n  --rgw-sfs-data-path $(pwd)/dev/rgw.foo\n"})}),"\n",(0,s.jsx)(n.p,{children:"Once the daemon is running and outputting its logs to the terminal,\nstart issuing commands to the daemon."}),"\n",(0,s.jsx)(n.p,{children:"During the interactive configuration there are prompts with questions. We\nrecommend using the following answers unless the deployment differs significantly."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"  Access Key: test\n  Secret Key: test\n  Default Region: US\n  S3 Endpoint: 127.0.0.1:7480\n  DNS-style bucket+hostname:port template for accessing a bucket: 127.0.0.1:7480/%(bucket)\n  Encryption password: ****\n  Path to GPG program: /usr/bin/gpg\n  Use HTTPS protocol: False\n  HTTP Proxy server name:\n  HTTP Proxy server port: 0\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Note that the ",(0,s.jsx)(n.code,{children:"sfs"})," backend automatically creates an initial user with\n",(0,s.jsx)(n.code,{children:"Access Key"})," and ",(0,s.jsx)(n.code,{children:"Secret Key"}),' set to "test".  This can be overridden when\nrunning the gateway via the ',(0,s.jsx)(n.code,{children:"RGW_DEFAULT_USER_ACCESS_KEY"})," and\n",(0,s.jsx)(n.code,{children:"RGW_DEFAULT_USER_SECRET_KEY"})," environment variables."]}),"\n",(0,s.jsxs)(n.p,{children:["Should the configuration be correct, you should be able to issue commands\nagainst the running RGW. E.g., ",(0,s.jsx)(n.code,{children:"s3cmd mb s3://foo"}),", to create a new bucket."]}),"\n",(0,s.jsx)(n.h2,{id:"how-to-build-your-own-containers",children:"How to build your own containers"}),"\n",(0,s.jsx)(n.h3,{id:"building-the-s3gw-container-image",children:"Building the s3gw container image"}),"\n",(0,s.jsxs)(n.p,{children:["This documentation guides you through the steps to build the ",(0,s.jsx)(n.code,{children:"s3gw"})," container image."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"NOTE:"})," The absolute paths mentioned in this document may be different on\nyour system."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsx)(n.p,{children:"Make sure you've installed the following applications:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"podman"}),"\n",(0,s.jsx)(n.li,{children:"buildah"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Optionally, if you prefer building an ",(0,s.jsx)(n.code,{children:"s3gw"})," container image with Docker you\nwill need:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"docker"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The build scripts expect the following directory hierarchy."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"|- s3gw/\n   |- ceph/\n   |  |- build/\n   |  ...\n   |\n   |- tools/\n      |- build/\n   ...\n"})}),"\n",(0,s.jsx)(n.h3,{id:"building-the-radosgw-binary",children:"Building the radosgw binary"}),"\n",(0,s.jsxs)(n.p,{children:["To build the ",(0,s.jsx)(n.code,{children:"radosgw"})," binary, a containerized build environment is used. This\ncontainer can be built by running the following command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"cd ~/git/s3gw/tools/build\npodman build --tag build-radosgw -f ./Dockerfile.build-radosgw\n"})}),"\n",(0,s.jsxs)(n.p,{children:["If you experience connection issues while downloading the packages to be\ninstalled in the build environment, try using the ",(0,s.jsx)(n.code,{children:"--net=host"})," command line\nargument."]}),"\n",(0,s.jsxs)(n.p,{children:["After the build environment container image has been built, the ",(0,s.jsx)(n.code,{children:"radosgw"}),"\nbinary can be built automatically anytime the container is started. Make sure the\npath to the Ceph Git repository in the host file system is correct, e.g.\n",(0,s.jsx)(n.code,{children:"../../ceph"}),", ",(0,s.jsx)(n.code,{children:"~/git/ceph"}),", ..."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"podman run \\\n  --replace \\\n  --name build-radosgw \\\n  -v ../../ceph/:/srv/ceph/ \\\n  localhost/build-radosgw\n"})}),"\n",(0,s.jsxs)(n.p,{children:["By default, the ",(0,s.jsx)(n.code,{children:"radosgw"})," binary file is built in ",(0,s.jsx)(n.code,{children:"Debug"})," mode. For\nproduction builds, set the environment variable ",(0,s.jsx)(n.code,{children:"CMAKE_BUILD_TYPE"})," to ",(0,s.jsx)(n.code,{children:"Release"}),",\n",(0,s.jsx)(n.code,{children:"RelWithDebInfo"})," or ",(0,s.jsx)(n.code,{children:"MinSizeRel"}),". Check the ",(0,s.jsx)(n.a,{href:"https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html",children:"CMAKE_BUILD_TYPE documentation"}),"\nfor more information."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'podman run \\\n  --replace \\\n  --name build-radosgw \\\n  -e CMAKE_BUILD_TYPE="MinSizeRel" \\\n  -v ../../ceph/:/srv/ceph/ \\\n  localhost/build-radosgw\n'})}),"\n",(0,s.jsx)(n.h3,{id:"build-the-s3gw-container-image",children:"Build the s3gw container image"}),"\n",(0,s.jsxs)(n.p,{children:["If the Ceph ",(0,s.jsx)(n.code,{children:"radosgw"})," binary is compiled, the container image can be build with\nthe following commands:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"cd ~/git/s3gw/tools/build\n./build-container.sh\n"})}),"\n",(0,s.jsxs)(n.p,{children:["By default, this builds an ",(0,s.jsx)(n.code,{children:"s3gw"})," image using podman. In order to build an\n",(0,s.jsx)(n.code,{children:"s3gw"})," image with Docker, you can run:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"cd ~/git/s3gw/tools/build\nCONTAINER_ENGINE=docker ./build-container.sh\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The container build script expects the ",(0,s.jsx)(n.code,{children:"radosgw"})," binary at the relative path\n",(0,s.jsx)(n.code,{children:"../ceph/build/bin"}),". This can be customized via the ",(0,s.jsx)(n.code,{children:"CEPH_DIR"})," environment\nvariable."]}),"\n",(0,s.jsxs)(n.p,{children:["The container image name is ",(0,s.jsx)(n.code,{children:"s3gw"})," by default. This can be customized via the\nenvironment variable ",(0,s.jsx)(n.code,{children:"IMAGE_NAME"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"running-the-s3gw-container",children:"Running the s3gw container"}),"\n",(0,s.jsxs)(n.p,{children:["Finally, run the ",(0,s.jsx)(n.code,{children:"s3gw"})," container with the following command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"podman run --replace --name=s3gw -it -p 7480:7480 localhost/s3gw\n"})}),"\n",(0,s.jsx)(n.p,{children:"or, when using Docker:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"docker run -p 7480:7480 localhost/s3gw\n"})}),"\n",(0,s.jsx)(n.p,{children:"By default, the container runs with the following arguments:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"--rgw-backend-store sfs\n--debug-rgw 1\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can override them passing different values when starting the container. For\nexample if you want to increase ",(0,s.jsx)(n.code,{children:"radosgw"})," logging verbosity, you could run:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"podman run -p 7480:7480 localhost/s3gw --rgw-backend-store sfs --debug-rgw 15\n"})}),"\n",(0,s.jsx)(n.h3,{id:"building-the-radosgw-test-binaries",children:"Building the radosgw test binaries"}),"\n",(0,s.jsx)(n.p,{children:"A number of binaries implementing various tests for radosgw can be built.\nSuch binaries are focalized for testing specific radosgw implementation employed\nfor s3gw project."}),"\n",(0,s.jsx)(n.p,{children:"You can build them by executing:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'podman run \\\n  --replace \\\n  --name build-radosgw \\\n  -e WITH_TESTS="ON" \\\n  -v ../../ceph/:/srv/ceph/ \\\n  localhost/build-radosgw\n'})}),"\n",(0,s.jsx)(n.h3,{id:"build-the-s3gw-test-container-image",children:"Build the s3gw-test container image"}),"\n",(0,s.jsx)(n.p,{children:"If the test binaries are compiled, a container image can be built with\nthe following commands:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"cd ~/git/s3gw/tools/build\n./build-radosgw-test-container.sh\n"})}),"\n",(0,s.jsxs)(n.p,{children:["By default, this builds an ",(0,s.jsx)(n.code,{children:"s3gw-test"})," image using podman.\nIn order to build an ",(0,s.jsx)(n.code,{children:"s3gw-test"})," image with Docker, you can run:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"cd ~/git/s3gw/tools/build\nCONTAINER_ENGINE=docker ./build-radosgw-test-container.sh\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The container build script expects the test binaries at the relative path\n",(0,s.jsx)(n.code,{children:"../ceph/build/bin"}),". This can be customized via the ",(0,s.jsx)(n.code,{children:"CEPH_DIR"})," environment\nvariable."]}),"\n",(0,s.jsxs)(n.p,{children:["The container image name is ",(0,s.jsx)(n.code,{children:"s3gw-test"})," by default.\nThis can be customized via the environment variable ",(0,s.jsx)(n.code,{children:"IMAGE_NAME"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"running-the-s3gw-test-container",children:"Running the s3gw-test container"}),"\n",(0,s.jsxs)(n.p,{children:["Finally, you can run the ",(0,s.jsx)(n.code,{children:"s3gw-test"})," container with the following command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"podman run localhost/s3gw-test\n"})}),"\n",(0,s.jsx)(n.p,{children:"or, when using Docker:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"docker run -p 7480:7480 localhost/s3gw-test\n"})}),"\n",(0,s.jsx)(n.h2,{id:"building-a-s3gw-ui-application-image",children:"Building a s3gw-ui application image"}),"\n",(0,s.jsxs)(n.p,{children:["This documentation guides you through the several steps to build a ",(0,s.jsx)(n.code,{children:"s3gw-ui"}),"\napplication image. With ",(0,s.jsx)(n.code,{children:"s3gw-ui"})," image, we are referring at a generic term\nindicating an image containing an application used to provide a UI related with\nthe ",(0,s.jsx)(n.code,{children:"s3gw"})," project."]}),"\n",(0,s.jsx)(n.h3,{id:"conventions",children:"Conventions"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"s3gw-ui"})," application is associated with a ",(0,s.jsx)(n.code,{children:"Dockerfile"})," and adheres to the\nfollowing conventions:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Dockerfile build context must be placed inside a directory placed alongside to\nthe ",(0,s.jsx)(n.code,{children:"s3gw-ui"})," project."]}),"\n",(0,s.jsx)(n.li,{children:"You should be able to build that application from that directory with:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"npm install\nnpm run build\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"s3gw-ui"})," application should be consumable by ",(0,s.jsx)(n.code,{children:"node"})," after it has been built."]}),"\n",(0,s.jsx)(n.h3,{id:"prerequisites-1",children:"Prerequisites"}),"\n",(0,s.jsx)(n.p,{children:"Make sure you've installed the following applications:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Podman"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The build script expects the following directory hierarchy."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"|\n|- s3gw-ui/\n|  |- package.json\n|  ...\n|\n|- s3gw/tools/\n   |- build-ui/\n   ...\n"})}),"\n",(0,s.jsx)(n.h3,{id:"build-the-application",children:"Build the application"}),"\n",(0,s.jsxs)(n.p,{children:["Before building the ",(0,s.jsx)(n.code,{children:"s3gw-ui"})," image you need to build the container image that\nis used to compile the Angular based application. To do so, run:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"cd ~/git/s3gw/tools/build-ui\n./build.sh builder-image\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This needs to be done once. After that you can build a ",(0,s.jsx)(n.code,{children:"s3gw-ui"})," image by\nrunning the following commands:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"cd ~/git/s3gw/tools/build-ui\n./build.sh app\n./build.sh app-image\n"})}),"\n",(0,s.jsx)(n.h3,{id:"running-the-application",children:"Running the application"}),"\n",(0,s.jsx)(n.p,{children:"The user interface is running on port 8080 by default."}),"\n",(0,s.jsxs)(n.p,{children:["You can run a ",(0,s.jsx)(n.code,{children:"s3gw-ui"})," application with:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"podman run --replace --name=s3gw-ui -it -p 8080:8080 localhost/s3gw-ui\n"})}),"\n",(0,s.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsx)(n.p,{children:"To configure the application at runtime the following environment variables are\navailable:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"RGW_SERVICE_URL"}),"\n",(0,s.jsx)(n.p,{children:"This variable allows you to configure the URL to the RGW service."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"podman run --name=s3gw-ui ... -e RGW_SERVICE_URL=https://foo.bar:7480 localhost/s3gw-ui\n"})}),"\n",(0,s.jsx)(n.p,{children:"Keep in mind that the browser will report errors related to CORS if the\nRGW is running on a different URL or port and self-signed SSL certificates are\nused. In most cases, this can be fixed by visiting the URL of the RGW to accept\nthe SSL certificate."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var s=i(6540);const t={},o=s.createContext(t);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);