"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5321],{6732:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var t=s(4848),i=s(8453);const a={},r="Release Process",o={id:"0007-release-process",title:"Release Process",description:"Note Before",source:"@site/../s3gw/docs/decisions/0007-release-process.md",sourceDirName:".",slug:"/0007-release-process",permalink:"/decisions/0007-release-process",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{},sidebar:"decisions",previous:{title:"Git branches and tags",permalink:"/decisions/0006-git-branches-tags"},next:{title:"Pull Requests and Code Review Guide",permalink:"/decisions/0008-pull-requests-code-review-guide"}},c={},l=[{value:"Note Before",id:"note-before",level:2},{value:"Context and Problem Statement",id:"context-and-problem-statement",level:2},{value:"Definitions",id:"definitions",level:2},{value:"Architecture of a Release",id:"architecture-of-a-release",level:2},{value:"Versioning",id:"versioning",level:3},{value:"Branching",id:"branching",level:3},{value:"Release Candidate",id:"release-candidate",level:3},{value:"Step-by-Step Release Process",id:"step-by-step-release-process",level:2},{value:"[Sanity Checks]",id:"sanity-checks",level:3},{value:"[Testing]",id:"testing",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",section:"section",sup:"sup",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"release-process",children:"Release Process"}),"\n",(0,t.jsx)(n.h2,{id:"note-before",children:"Note Before"}),"\n",(0,t.jsxs)(n.p,{children:["This document is superseded by three different ADRs, covering the same topics\nand expanding them: ",(0,t.jsx)(n.a,{href:"/decisions/0015-release-methodology",children:"Release Methodology"}),",\n",(0,t.jsx)(n.a,{href:"/decisions/0016-release-steps",children:"Release Steps"}),", and ",(0,t.jsx)(n.a,{href:"/decisions/0017-release-testing",children:"Release Testing"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"context-and-problem-statement",children:"Context and Problem Statement"}),"\n",(0,t.jsxs)(n.p,{children:["Releasing is an essential process for the ",(0,t.jsx)(n.code,{children:"s3gw"})," project. Given the project is\ncomposed by various sub-projects, that need to be prepared, tested, and\neventually released, the Release Process is not trivial."]}),"\n",(0,t.jsxs)(n.p,{children:["This document defines and agrees on the Release Process for the ",(0,t.jsx)(n.code,{children:"s3gw"})," project,\nincluding the steps to be taken on its individual sub-projects, and results\nfrom several iterations defining the Release Process (previously kept in the\n",(0,t.jsx)(n.a,{href:"./0004-release-captain",children:"Release Captain ADR"}),"). The previous\ndocument suffered significant changes since its inception, being modified for\nalmost every release we have had; we are hoping the present document will\nbenefit from more stability."]}),"\n",(0,t.jsx)(n.h2,{id:"definitions",children:"Definitions"}),"\n",(0,t.jsx)(n.p,{children:"Throughout this document we will often refer to certain things or terms. Below\nwe define what they mean."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Version: the state of a given project, at a specific point in time."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Release Candidate: the tentative set of deliverables from the various ",(0,t.jsx)(n.code,{children:"s3gw"}),"\nsub-projects' repositories at a certain version. It may become the final Release."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Release: the set of deliverables from the various ",(0,t.jsx)(n.code,{children:"s3gw"})," sub-projects'\nrepositories at a certain version, published, and accompanied by a\nRelease Statement."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Release Statement: a document associated with a given Release, detailing the\nversion being released, and a Changelog."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Changelog: a list of significant changes that merit being communicated to\nstakeholders in a human-consumable format."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Release Pipeline: the set of automated workflows triggered on a specific\nmoment, resulting in a set of containers or artifacts to be released."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Release Branch: the state of a given project's development branch at a given\npoint in time, as a separate named branch in said project's git repository."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Backport: the act of applying a patch to a Release Branch originated in a\nmore recent Release Branch or the development branch."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Quay: the current container registry of choice, found at ",(0,t.jsx)(n.a,{href:"https://quay.io",children:"https://quay.io"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"architecture-of-a-release",children:"Architecture of a Release"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"s3gw"})," project is composed by multiple sub-projects:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/aquarist-labs/s3gw-ui/",children:(0,t.jsx)(n.code,{children:"s3gw-ui"})}),": The User Interface for ",(0,t.jsx)(n.code,{children:"s3gw"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/aquarist-labs/s3gw-charts/",children:(0,t.jsx)(n.code,{children:"s3gw-charts"})}),": Containing the Helm Chart to deploy ",(0,t.jsx)(n.code,{children:"s3gw"})," in a Kubernetes\ncontext."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/aquarist-labs/s3gw/",children:(0,t.jsx)(n.code,{children:"s3gw"})}),": Where most of our tooling and infrastructure scripts live."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/aquarist-labs/ceph/",children:(0,t.jsx)(n.code,{children:"ceph"})}),": Where the core backend of ",(0,t.jsx)(n.code,{children:"s3gw"})," lives."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Releasing ",(0,t.jsx)(n.code,{children:"s3gw"})," is essentially a coordinated process with all the sub-projects,\nwhich need to be prepared at different stages."]}),"\n",(0,t.jsxs)(n.p,{children:["For instance, while the ",(0,t.jsx)(n.code,{children:"s3gw-ui"}),", and ",(0,t.jsx)(n.code,{children:"ceph"})," sub-projects can be\nprepared independently, the ",(0,t.jsx)(n.code,{children:"s3gw-charts"})," sub-project requires all pieces to be\nin place before the final Release is performed. This stems from the Helm Chart\nwe provide depending on the various containers being published to Quay;\notherwise, the chart being released would point to unavailable containers."]}),"\n",(0,t.jsx)(n.h3,{id:"versioning",children:"Versioning"}),"\n",(0,t.jsxs)(n.p,{children:["Each release follows ",(0,t.jsx)(n.a,{href:"https://semver.org/",children:"Semantic Versioning"}),", with versions being in the format\n",(0,t.jsx)(n.code,{children:"vX.Y.Z"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["When dealing with the individual sub-projects' repositories, we use\n",(0,t.jsx)(n.code,{children:"s3gw-vX.Y"})," for release branches and ",(0,t.jsx)(n.code,{children:"s3gw-vX.Y.Z"})," for version tags.\nThe ",(0,t.jsx)(n.code,{children:"s3gw-"})," prefix in the sub-projects is needed to avoid naming conflicts with\nexisting tags in the ",(0,t.jsx)(n.code,{children:"ceph"})," repo.\nIt is particularly important to understand the difference between a release\nbranch and a version tag."]}),"\n",(0,t.jsxs)(n.p,{children:["A release branch represents the tree upon which the release ",(0,t.jsx)(n.code,{children:"vX.Y"})," is based on,\nand once created becomes immutable except for bug fixes (by backporting from the\nmain development branch). The version tags specify the point at which a given\nrelease branch is released. A release branch may have multiple version tags\nthroughout the duration of its support lifecycle, as bug fixes are backported to\nthat particular release."]}),"\n",(0,t.jsx)(n.h3,{id:"branching",children:"Branching"}),"\n",(0,t.jsx)(n.p,{children:"A release represents a point in time of each sub-project's repositories. To keep\ntrack of the state of a sub-project's state at that point in time, we rely on\nbranches. This allows us to bound the scope of a specific release, and makes\nmaintaining a release easier, especially when we need to release one or more\npatch versions on top of the initial release version."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"     main    s3gw-vX.Y branch\n        |    |\n        G    o <tag: vX.Y.1>\n        |    |\n        F    F'\n        |    |\n        E    o <tag: vX.Y.0>\n        |    |\n        D    E'\n        | .--' vX.Y initial branch\n        |/\n        C\n        |\n        B\n        |\n        A\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The diagram above represents the branching out of version ",(0,t.jsx)(n.code,{children:"vX.Y"})," from the main\nbranch for a given sub-project's repository. As one can see, version ",(0,t.jsx)(n.code,{children:"X.Y.0"})," is\nreleased based on the initial branched off history, containing patches ",(0,t.jsx)(n.code,{children:"A"}),", ",(0,t.jsx)(n.code,{children:"B"}),",\nand ",(0,t.jsx)(n.code,{children:"C"}),", plus a backport of patch ",(0,t.jsx)(n.code,{children:"E"}),". Later on, version ",(0,t.jsx)(n.code,{children:"X.Y.1"})," is released\ncontaining an additional backport for patch ",(0,t.jsx)(n.code,{children:"F"}),". Both these backports are\nassumed to be bug fixes. We thus maintain a stable source of truth for version\n",(0,t.jsx)(n.code,{children:"X.Y"}),", while being able to release versions of said branch at different points\nin time."]}),"\n",(0,t.jsx)(n.h3,{id:"release-candidate",children:"Release Candidate"}),"\n",(0,t.jsxs)(n.p,{children:["Once we branch out the main branch to a release branch ",(0,t.jsx)(n.code,{children:"s3gw-vX.Y"}),", we have a\ngiven state with which we are comfortable but that still needs to be validated\nprior to being released. This validation includes several automated and manual\ntests, which are described in ",(0,t.jsx)(n.a,{href:"#testing",children:"Testing"}),", but will require release\ncontainers and artifacts to be built. These will be automatically built by our\ninfrastructure, but require nonetheless a tag to be associated with it."]}),"\n",(0,t.jsxs)(n.p,{children:["Given we can't simply create a version tag for something that hasn't been\nvalidated, we will rely on release candidates instead. Much like a version tag,\na release candidate specifies that a given point in time of a particular release\nbranch is considered close enough to being released, and takes the form of a tag\nin the format ",(0,t.jsx)(n.code,{children:"vX.Y.Z-rcN"}),", with ",(0,t.jsx)(n.code,{children:"N"})," being the number of the release candidate\nfor version ",(0,t.jsx)(n.code,{children:"X.Y.Z"}),", in ascending fashion. As an example, take the diagram\nbelow."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"     main    s3gw-vX.Y branch\n        |    |\n        G    o <tag: vX.Y.1-rc1> <tag: vX.Y.1>\n        |    |\n        F    F'\n        |    |\n        E    o <tag: vX.Y.0-rc2> <tag: vX.Y.0>\n        |    |\n        |    E'\n        D    |\n        |    o <tag: vX.Y.0-rc1>\n        |  /\n        |/\n        C\n        |\n        B\n        |\n        A\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In this example we can see that, upon branching off from main, we create a\n",(0,t.jsx)(n.code,{children:"vX.Y.0-rc1"})," tag, which will trigger our infrastructure automation and build the\nvarious artifacts needed for a release. In this case we must have identified a\nproblem, because we had to apply a backport ",(0,t.jsx)(n.code,{children:"E'"})," to the release branch. This\nwould have led us to create a new release candidate ",(0,t.jsx)(n.code,{children:"vX.Y.0-rc2"}),", which upon\nvalidation was deemed correct and released as ",(0,t.jsx)(n.code,{children:"vX.Y.0"}),". Later on we must have\nfound that a new bug fix was required, had patch ",(0,t.jsx)(n.code,{children:"F'"})," backported, and a new\nrelease candidate for version ",(0,t.jsx)(n.code,{children:"X.Y.1"})," was created, ",(0,t.jsx)(n.code,{children:"vX.Y.1-rc1"}),". Once this\nrelease candidate was properly validated, version ",(0,t.jsx)(n.code,{children:"vX.Y.1"})," was released."]}),"\n",(0,t.jsx)(n.h2,{id:"step-by-step-release-process",children:"Step-by-Step Release Process"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["For each sub-project repository, and for the ",(0,t.jsx)(n.code,{children:"s3gw"})," repository, branch off\n",(0,t.jsx)(n.code,{children:"main"})," to a new release branch. This can be achieved via the GitHub web\nUI",(0,t.jsx)(n.sup,{children:(0,t.jsx)(n.a,{href:"#user-content-fn-1",id:"user-content-fnref-1","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"1"})}),", or by pushing the new branch to the repository via the CLI",(0,t.jsx)(n.sup,{children:(0,t.jsx)(n.a,{href:"#user-content-fn-2",id:"user-content-fnref-2","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"2"})}),".\nRelease branch names follow the ",(0,t.jsx)(n.code,{children:"s3gw-vX.Y"})," convention."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["For sub-project ",(0,t.jsx)(n.code,{children:"s3gw-ui"})," and ",(0,t.jsx)(n.code,{children:"ceph"}),", tag the release branch\nas a release candidate",(0,t.jsx)(n.sup,{children:(0,t.jsx)(n.a,{href:"#user-content-fn-3",id:"user-content-fnref-3","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"3"})}),". We do not tag the ",(0,t.jsx)(n.code,{children:"s3gw-charts"})," repository\nbecause that would trigger a release workflow that we don't want to trigger\nat this time",(0,t.jsx)(n.sup,{children:(0,t.jsx)(n.a,{href:"#user-content-fn-4",id:"user-content-fnref-4","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"4"})}),". The following example assumes ",(0,t.jsx)(n.code,{children:"upstream"})," as the source remote\nfor a given sub-project, and ",(0,t.jsx)(n.code,{children:"v0.11"})," as the version being released. Keep in\nmind that when tagging, creating a signed and annotated tag",(0,t.jsx)(n.sup,{children:(0,t.jsx)(n.a,{href:"#user-content-fn-5",id:"user-content-fnref-5","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"5"})})," is crucial."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'git checkout upstream/s3gw-v0.11 -b s3gw-v0.11\ngit tag --annotate --sign -m "Release Candidate 1 for v0.11.0" s3gw-v0.11.0-rc1\ngit push upstream s3gw-v0.11.0-rc1\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["In the ",(0,t.jsx)(n.code,{children:"s3gw"})," repository's newly created release branch, update the various\nsub-projects' state to reflect the now existing tags. This can be achieved in\nby checking out the appropriate tag on each individual sub-project's\nsubmodule directory. A commit will be necessary to persist the\nchanges. The following shows a trimmed example of what to do."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'# in the root of the s3gw repo, branch s3gw-v0.11\ncd ceph/\ngit remote update\ngit checkout origin/s3gw-v0.11.0-rc1\ncd ..\ngit add ceph/\n\n# repeat for the several other sub-projects\n\ngit commit -s -S -m "update submodules for v0.11.0-rc1"\ngit submodule update --init --remote --sync\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Tag the ",(0,t.jsx)(n.code,{children:"s3gw"})," repository with the appropriate release candidate tag.\nIt is important, that this tag contains only the ",(0,t.jsx)(n.code,{children:"vX.Y.Z"})," version."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'git tag --annotate --sign -m "Release Candidate 1 for v0.11.0" v0.11.0-rc1\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Push the release branch and tag. This will trigger the release pipeline,\ncreating the various release artifacts and a draft release."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"git push upstream s3gw-v0.11\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Once the containers have been created and pushed to Quay, it's time to start\nvalidating the release candidate. Please refer to the\n",(0,t.jsx)(n.a,{href:"#testing",children:"Testing Section"})," before continuing."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["If any patches needed to be backported at some point since the last release\ncandidate, please go back to ",(0,t.jsx)(n.code,{children:"step 2."})," and increase the release candidate\nversion by ",(0,t.jsx)(n.code,{children:"1"})," (i.e., ",(0,t.jsx)(n.code,{children:"-rc2"}),", ",(0,t.jsx)(n.code,{children:"-rc3"}),", etc.). Even if a particular sub-project\nrepository has not been changed, it is still crucial to tag it with the new\nrelease candidate version, for consistency across repositories."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Assuming everything goes well, we can now go through step ",(0,t.jsx)(n.code,{children:"2."})," but, instead\nof tagging for a release candidate version, we will be tagging for the\nrelease version."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'git tag --annotate --sign -m "Release v0.11.0" v0.11.0\ngit push upstream s3gw-v0.11\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["At this point we will need to update the Helm Chart to reflect the release\nversion. This becomes a bit tricky, because we want the change to be reflected\nin both the ",(0,t.jsx)(n.code,{children:"main"})," branch and the ",(0,t.jsx)(n.code,{children:"s3gw-vX.Y"})," branch on the ",(0,t.jsx)(n.code,{children:"s3gw-charts"}),"\nrepository. To do this, we will apply a patch to the ",(0,t.jsx)(n.code,{children:"main"})," branch, and then\nbackport the change to the release branch."]}),"\n",(0,t.jsxs)(n.p,{children:["First, for ",(0,t.jsx)(n.code,{children:"v0.11.0"}),", the chart version needs to be updated with the specific\nversion, at ",(0,t.jsx)(n.code,{children:"charts/s3gw/Chart.yaml"}),". This change should then be committed,\nand a Pull Request of this change opened against ",(0,t.jsx)(n.code,{children:"main"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Once the Pull Request has been merged, note down the new commit's ",(0,t.jsx)(n.code,{children:"SHA"}),";\nrunning ",(0,t.jsx)(n.code,{children:"git log"})," should give you its value. We can now change to the\n",(0,t.jsx)(n.code,{children:"s3gw-v0.11"})," branch, and ",(0,t.jsx)(n.code,{children:"cherry-pick"})," the commit, and finally tag the branch\nwith the release version."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'git cherry-pick -x -s -S <SHA>\ngit tag --annotate --sign -m "Release v0.11.0" s3gw-v0.11.0\ngit push upstream s3gw-v0.11\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["With all sub-project repositories ready to be released, it's time to prepare\nthe ",(0,t.jsx)(n.code,{children:"s3gw"})," repository for a release. Much like what we did for the\n",(0,t.jsx)(n.code,{children:"s3gw-charts"})," repository, we will have to apply a patch on the ",(0,t.jsx)(n.code,{children:"main"})," branch\nfirst, and then backport it to the release branch: this time to keep track\nof the ",(0,t.jsx)(n.code,{children:"CHANGELOG"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["First step, we need to go to the ",(0,t.jsx)(n.a,{href:"https://github.com/aquarist-labs/s3gw/wiki/Current-CHANGELOG",children:"Current CHANGELOG"})," page on the\nrepository's Wiki, and copy the contents for the release version being\nhandled to a file at ",(0,t.jsx)(n.code,{children:"docs/release-notes/s3gw-vX.Y.Z.md"}),". Keep in mind the\nrelease notes should be easily consumable by a human. Feel free to take\ninspiration on previous release notes, and maintain consistency with them.\nWe should also ensure the symbolic link at\n",(0,t.jsx)(n.code,{children:"docs/release-notes/s3gw-latest.md"})," is updated to point to the newly created\nfile. It is crucial that the resulting commit includes these two changes."]}),"\n",(0,t.jsxs)(n.p,{children:["Creating a Pull Request against ",(0,t.jsx)(n.code,{children:"s3gw"}),"'s ",(0,t.jsx)(n.code,{children:"main"})," branch is the next step.\nOnce that has been merged, note down the new commit's ",(0,t.jsx)(n.code,{children:"SHA"}),", go back to the\n",(0,t.jsx)(n.code,{children:"s3gw-vX.Y"})," branch, and cherry-pick the commit, tagging the branch with for\nour specific release."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'git cherry-pick -x -s -S <SHA>\ngit tag --annotate --sign -m "Release v0.11.0" s3gw-v0.11.0\ngit push upstream s3gw-v0.11\n'})}),"\n",(0,t.jsx)(n.p,{children:"By pushing the branch with the release tag, we will trigger the release\nworkflow that will build the various release artifacts and publish the\ncontainers on Quay."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["During the release workflow, a ",(0,t.jsx)(n.a,{href:"https://github.com/aquarist-labs/s3gw/releases",children:"release draft"})," will be created. Once the\nrelease artifacts have finished building, and have been published on Quay,\nwe can then copy the contents of the release notes file we created in\nstep ",(0,t.jsx)(n.code,{children:"10."}),", and make the release draft public."]}),"\n",(0,t.jsxs)(n.p,{children:["It is advised that before making the release draft public, the list in\n",(0,t.jsx)(n.a,{href:"#sanity-checks",children:"Sanity Checks"})," be ensured to hold true."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"With the release now complete, it is time to shout about it from the\nrooftops. A release announcement should now be sent to the various\ncommunication channels being used by the project."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["rancher-users Slack channel ",(0,t.jsx)(n.code,{children:"#s3gw"})]}),"\n",(0,t.jsxs)(n.li,{children:["SUSE Slack channel ",(0,t.jsx)(n.code,{children:"#discuss-s3gw"})]}),"\n",(0,t.jsxs)(n.li,{children:["project mailing list at ",(0,t.jsx)(n.code,{children:"s3gw@suse.com"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"sanity-checks",children:"[Sanity Checks]"}),"\n",(0,t.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,t.jsx)(n.code,{children:"s3gw"})," container has been published on Quay for ",(0,t.jsx)(n.code,{children:"vX.Y.Z"}),"."]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,t.jsx)(n.code,{children:"s3gw-ui"})," container has been published on Quay for ",(0,t.jsx)(n.code,{children:"vX.Y.Z"}),"."]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","both containers are appropriately tagged with ",(0,t.jsx)(n.code,{children:"vX.Y.Z"})," on Quay."]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","both containers are tagged with ",(0,t.jsx)(n.code,{children:"latest"})," on Quay."]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,t.jsx)(n.code,{children:"latest"})," version containers are the same as the ",(0,t.jsx)(n.code,{children:"vX.Y.Z"})," containers on\nQuay."]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Helm Chart has been properly updated for ",(0,t.jsx)(n.code,{children:"vX.Y.Z"}),"."]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Helm Chart for ",(0,t.jsx)(n.code,{children:"vX.Y.Z"})," is visible on ",(0,t.jsx)(n.a,{href:"https://artifacthub.io/packages/helm/s3gw/s3gw",children:"ArtifactHub"}),". This can take\nabout 20 minutes."]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","The release notes are in place, both on the ",(0,t.jsx)(n.code,{children:"s3gw"})," repository's ",(0,t.jsx)(n.code,{children:"main"}),"\nbranch and on the ",(0,t.jsx)(n.code,{children:"s3gw-vX.Y"})," branch."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"testing",children:"[Testing]"}),"\n",(0,t.jsx)(n.p,{children:"To be expanded in the future, or maybe link to a proper testing document."}),"\n",(0,t.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Install the ",(0,t.jsx)(n.code,{children:"s3gw-ui"})," container and sign-in. Perform some actions like\ncreating/update/delete users and buckets. Also try uploading/deleting\nobjects in buckets."]}),"\n"]}),"\n",(0,t.jsxs)(n.section,{"data-footnotes":!0,className:"footnotes",children:[(0,t.jsx)(n.h2,{className:"sr-only",id:"footnote-label",children:"Footnotes"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{id:"user-content-fn-1",children:["\n",(0,t.jsxs)(n.p,{children:["For example, for a ",(0,t.jsx)(n.code,{children:"v0.11.0"})," release, for the ",(0,t.jsx)(n.code,{children:"s3gw"}),"\nrepository, go to the ",(0,t.jsx)(n.a,{href:"https://github.com/aquarist-labs/s3gw/branches",children:"Branches Page"})," and click the ",(0,t.jsx)(n.code,{children:"New branch"})," button. ",(0,t.jsx)(n.a,{href:"#user-content-fnref-1","data-footnote-backref":"","aria-label":"Back to reference 1",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{id:"user-content-fn-2",children:["\n",(0,t.jsxs)(n.p,{children:["For example, for a ",(0,t.jsx)(n.code,{children:"v0.11.0"})," release, ",(0,t.jsx)(n.code,{children:"git branch --copy main s3gw-v0.11"})," ",(0,t.jsx)(n.a,{href:"#user-content-fnref-2","data-footnote-backref":"","aria-label":"Back to reference 2",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{id:"user-content-fn-3",children:["\n",(0,t.jsxs)(n.p,{children:["Please refer to ",(0,t.jsx)(n.a,{href:"https://git-scm.com/book/en/v2/Git-Basics-Tagging",children:"Git's Documentation"})," for more information on Tagging. ",(0,t.jsx)(n.a,{href:"#user-content-fnref-3","data-footnote-backref":"","aria-label":"Back to reference 3",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{id:"user-content-fn-4",children:["\n",(0,t.jsxs)(n.p,{children:["While the release workflow on ",(0,t.jsx)(n.code,{children:"s3gw-charts"})," would be triggered, it\nwouldn't run to completion given the version of the chart hasn't increased\nover the tag in the repository. ",(0,t.jsx)(n.a,{href:"#user-content-fnref-4","data-footnote-backref":"","aria-label":"Back to reference 4",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{id:"user-content-fn-5",children:["\n",(0,t.jsxs)(n.p,{children:["Annotated tags keep information about creation time, author, a message,\nare checksummed, and can be signed, being full fledged git objects. For a\nrelease it is important to keep this information. A lightweight tag, on the\nother hand, is often used for temporary purposes. ",(0,t.jsx)(n.a,{href:"#user-content-fnref-5","data-footnote-backref":"","aria-label":"Back to reference 5",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var t=s(6540);const i={},a=t.createContext(i);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);