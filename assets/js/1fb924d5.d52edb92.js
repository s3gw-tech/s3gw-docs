"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2810],{8589:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>l,frontMatter:()=>o,metadata:()=>d,toc:()=>a});var i=s(4848),t=s(8453);const o={},r="s3gw-ui backend",d={id:"0013-ui-backend",title:"s3gw-ui backend",description:"Context and Problem Statement",source:"@site/../s3gw/docs/decisions/0013-ui-backend.md",sourceDirName:".",slug:"/0013-ui-backend",permalink:"/decisions/0013-ui-backend",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:13,frontMatter:{},sidebar:"decisions",previous:{title:"SFS Error Handling",permalink:"/decisions/0012-sfs-error-handling"},next:{title:"s3gw-ui backend API",permalink:"/decisions/0014-ui-backend-api"}},c={},a=[{value:"Context and Problem Statement",id:"context-and-problem-statement",level:2},{value:"The problem with CORS",id:"the-problem-with-cors",level:3},{value:"<code>s3gw</code> managed by other UIs (e.g., Longhorn)",id:"s3gw-managed-by-other-uis-eg-longhorn",level:3},{value:"Multiple <code>s3gw</code> instances managed by the same <code>s3gw-ui</code>",id:"multiple-s3gw-instances-managed-by-the-same-s3gw-ui",level:3},{value:"Considered Options",id:"considered-options",level:2},{value:"Web Proxy",id:"web-proxy",level:3},{value:"Serving <code>s3gw-ui</code> from the same address as <code>s3gw</code>",id:"serving-s3gw-ui-from-the-same-address-as-s3gw",level:3},{value:"Always honoring CORS Headers from <code>s3gw</code>",id:"always-honoring-cors-headers-from-s3gw",level:3},{value:"Tweaking <code>s3gw</code> to honor CORS Headers except for the s3gw-ui",id:"tweaking-s3gw-to-honor-cors-headers-except-for-the-s3gw-ui",level:3},{value:"s3gw-ui specific Backend",id:"s3gw-ui-specific-backend",level:3},{value:"Decision Outcome",id:"decision-outcome",level:2},{value:"Technologies",id:"technologies",level:3},{value:"Behavior",id:"behavior",level:3},{value:"Location",id:"location",level:3},{value:"Challenges",id:"challenges",level:3}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"s3gw-ui-backend",children:"s3gw-ui backend"}),"\n",(0,i.jsx)(n.h2,{id:"context-and-problem-statement",children:"Context and Problem Statement"}),"\n",(0,i.jsxs)(n.p,{children:["The current ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," format is as a browser application, loaded and run solely\nclient-side, which directly speaks to the s3gw service (RGW, henceforth known as\n",(0,i.jsx)(n.code,{children:"s3gw"}),")."]}),"\n",(0,i.jsx)(n.mermaid,{value:"flowchart LR\n    user(browser) == 1 ==> traefik(traefik) == 2 ==> ui(s3gw-ui)\n    ui == 3 ==> traefik == 4 ==> user\n    user == 5 ==> traefik == 6 ==> s3gw\n    s3gw == 7 ==> traefik == 8 ==> user\n    linkStyle 0,1 stroke: green\n    linkStyle 2,3 stroke: red\n    linkStyle 4,5 stroke: purple\n    linkStyle 6,7 stroke: blue\n    style traefik height: 100px, y: -50px\n    style user height: 100px, y: -50px"}),"\n",(0,i.jsxs)(n.p,{children:["The diagram represents the various steps in the workings of the ",(0,i.jsx)(n.code,{children:"s3gw-ui"}),". As\none can see, ",(0,i.jsx)(n.code,{children:"traefik"})," is always in the middle of the communication between the\nuser's browser and both the ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," and the ",(0,i.jsx)(n.code,{children:"s3gw"})," service; and we can also\nsee that ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," does not communicate directly with ",(0,i.jsx)(n.code,{children:"s3gw"}),". Instead, what\nhappens is that during ",(0,i.jsx)(n.code,{children:"1"})," and ",(0,i.jsx)(n.code,{children:"2"})," we have the user's browser accessing the\n",(0,i.jsx)(n.code,{children:"s3gw-ui"})," container and being presented with the ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," application (via ",(0,i.jsx)(n.code,{children:"3"}),"\nand ",(0,i.jsx)(n.code,{children:"4"}),"); this application is then loaded by the browser, and all subsequent\nactions happen client-side, without involving ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," (except if additional UI\nresources need to be loaded). All further communication with ",(0,i.jsx)(n.code,{children:"s3gw"})," is done\ndirectly from the user's browser to the ",(0,i.jsx)(n.code,{children:"s3gw"})," service (see ",(0,i.jsx)(n.code,{children:"5"}),", ",(0,i.jsx)(n.code,{children:"6"}),", ",(0,i.jsx)(n.code,{children:"7"}),", and ",(0,i.jsx)(n.code,{children:"8"}),")."]}),"\n",(0,i.jsx)(n.h3,{id:"the-problem-with-cors",children:"The problem with CORS"}),"\n",(0,i.jsxs)(n.p,{children:["Given the ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," is served to the client from a different host than the one\n",(0,i.jsx)(n.code,{children:"s3gw"})," is running on, we are subject to a modern browser mechanism intended to\nprevent a website to load cross-origin resources from servers that do not\nintend to share said resources (CORS)."]}),"\n",(0,i.jsxs)(n.p,{children:["While it is known how to make a web server allow cross-origin access to its\nresources, in our specific case it's a non-trivial endeavor because ",(0,i.jsx)(n.code,{children:"s3gw"}),"\ndoes not support a default CORS policy (other than for user-defined buckets),\nand thus does not populate CORS headers that the client expects. This results\nin the client refusing to allow the ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," from loading resources from the\n",(0,i.jsx)(n.code,{children:"s3gw"})," host, culminating in a non-working (or misbehaving) ",(0,i.jsx)(n.code,{children:"s3gw-ui"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["We have employed mitigation strategies to address this behavior. For\ndevelopment purposes, we use a local web server that both serves the frontend\nand at the same time acts as a proxy to ",(0,i.jsx)(n.code,{children:"s3gw"}),"; resources are thus served\nthrough this web server, and, from the client's point of view, their origin is\nin practice the same host the ",(0,i.jsx)(n.code,{children:"s3gw-ui"}),"'s application is being served from --\nCORS does not apply in this case. For production systems, we have instead\nopted to have a middleware, ",(0,i.jsx)(n.code,{children:"traefik"}),", that rewrites request response headers\noriginating from ",(0,i.jsx)(n.code,{children:"s3gw"}),", populating said response with CORS headers."]}),"\n",(0,i.jsxs)(n.p,{children:["The latter scenario, the one our users rely on, poses a significant problem:\nby rewriting the headers so the ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," is able to access the ",(0,i.jsx)(n.code,{children:"s3gw"}),"\nresources, we are not honoring the user-specified bucket-specific CORS policies.\nOn the other hand, if we choose to honor those policies, we expose the ",(0,i.jsx)(n.code,{children:"s3gw-ui"}),"\nto the possibility of being unable to administrate ",(0,i.jsx)(n.code,{children:"s3gw"})," as it is supposed to."]}),"\n",(0,i.jsxs)(n.h3,{id:"s3gw-managed-by-other-uis-eg-longhorn",children:[(0,i.jsx)(n.code,{children:"s3gw"})," managed by other UIs (e.g., Longhorn)"]}),"\n",(0,i.jsxs)(n.p,{children:["As our integration with Longhorn approaches, we may want to perform a\nsubset of the operation ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," currently supports via the Longhorn UI, for\nbetter integration. The approaches to such integration are out of the scope of\nthis document, but it is important to keep this in mind when choosing an option\nunder consideration. For instance, whether the selected option addresses the\nCORS issue throughout the board; and whether the selected option may be\nsustainable down the line."]}),"\n",(0,i.jsxs)(n.h3,{id:"multiple-s3gw-instances-managed-by-the-same-s3gw-ui",children:["Multiple ",(0,i.jsx)(n.code,{children:"s3gw"})," instances managed by the same ",(0,i.jsx)(n.code,{children:"s3gw-ui"})]}),"\n",(0,i.jsxs)(n.p,{children:["As we move closer to production environments, we will likely be expected to have\nmultiple ",(0,i.jsx)(n.code,{children:"s3gw"})," instances in the same cluster. While we can always have one\n",(0,i.jsx)(n.code,{children:"s3gw-ui"})," instance per ",(0,i.jsx)(n.code,{children:"s3gw"})," service, we should consider having one single\n",(0,i.jsx)(n.code,{children:"s3gw-ui"})," able to centrally manage multiple ",(0,i.jsx)(n.code,{children:"s3gw"})," service instances."]}),"\n",(0,i.jsx)(n.h2,{id:"considered-options",children:"Considered Options"}),"\n",(0,i.jsx)(n.p,{children:"With the intent to address the problems previously described, we have\nconsidered several different options. This section describes them."}),"\n",(0,i.jsx)(n.h3,{id:"web-proxy",children:"Web Proxy"}),"\n",(0,i.jsxs)(n.p,{children:["By setting a web proxy somewhere between the client and ",(0,i.jsx)(n.code,{children:"s3gw"}),", for UI purposes,\nwe could rewrite CORS headers solely for the UI use-case. However, it's not\nclear how this could be achieved. We would likely have to target client-side\nrequests to a different address than the one ",(0,i.jsx)(n.code,{children:"s3gw"})," lives in, proxying the\nrequests to the ",(0,i.jsx)(n.code,{children:"s3gw"})," service then."]}),"\n",(0,i.jsx)(n.mermaid,{value:"flowchart LR\n    user(browser) == 1 ==> ui(s3gw-ui) == 2 ==> user\n    user == 3 ==> proxy((proxy)) == 4 ==> s3gw == 5 ==> proxy == 6 ==> user\n\n    linkStyle 0 stroke: green\n    linkStyle 1 stroke: red\n    linkStyle 2,3 stroke: purple\n    linkStyle 4,5 stroke: blue"}),"\n",(0,i.jsx)(n.mermaid,{value:"flowchart LR\n    app(application) ==> s3gw(s3gw) ==> app\n    linkStyle 0 stroke: orange\n    linkStyle 1 stroke: magenta"}),"\n",(0,i.jsxs)(n.p,{children:["While this could potentially solve the CORS issue for the ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," client's\nbrowser, and potentially for the Longhorn UI, we could have a maintainability\nissue in our hands: this option requires the latter to implement a lot of the\nsame logic as ",(0,i.jsx)(n.code,{children:"s3gw-ui"}),". Additionally, this would require multiple proxies in\nthe same cluster, should we want to have the same ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," managing multiple\n",(0,i.jsx)(n.code,{children:"s3gw"})," instances; or, at least, be able to have the same proxy differentiating\nbetween the various ",(0,i.jsx)(n.code,{children:"s3gw"})," instances while handling requests from the same\n",(0,i.jsx)(n.code,{children:"s3gw-ui"})," address."]}),"\n",(0,i.jsxs)(n.h3,{id:"serving-s3gw-ui-from-the-same-address-as-s3gw",children:["Serving ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," from the same address as ",(0,i.jsx)(n.code,{children:"s3gw"})]}),"\n",(0,i.jsxs)(n.p,{children:["There are two options to serve ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," to the user's browser from",(0,i.jsx)(n.code,{children:"s3gw"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Modifying ",(0,i.jsx)(n.code,{children:"RGW"}),"'s code to support serving the UI directly; or,"]}),"\n",(0,i.jsxs)(n.li,{children:["Use something like ",(0,i.jsx)(n.code,{children:"nginx"}),"'s path-based routing to essentially proxy between\nthe user's browser and both ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," and ",(0,i.jsx)(n.code,{children:"s3gw"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Both these options suffer from the same problems though: we would always need to\nallocate a special-purpose path for the ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," to be served from (which would\nbe a special bucket when using path-based buckets), and we would still have\nCORS issues when accessing vhost-based buckets (because the UI would be served\nfrom a different vhost than the ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," address)."]}),"\n",(0,i.jsxs)(n.p,{children:["Additionally, we would be unable to manage several instances from the same\n",(0,i.jsx)(n.code,{children:"s3gw-ui"}),", and we would still need to duplicate logic in the Longhorn UI."]}),"\n",(0,i.jsxs)(n.h3,{id:"always-honoring-cors-headers-from-s3gw",children:["Always honoring CORS Headers from ",(0,i.jsx)(n.code,{children:"s3gw"})]}),"\n",(0,i.jsxs)(n.p,{children:["Alternatively, instead of attempting to deal with CORS headers, we could simply\nensure ",(0,i.jsx)(n.code,{children:"s3gw"})," always allowed any host from accessing its resources ",(0,i.jsx)(n.strong,{children:"except"}),"\nwhen a given bucket had a user-specified CORS policy. In this case, the\n",(0,i.jsx)(n.code,{children:"s3gw-ui"})," would function normally, except when a given bucket's CORS policy\nprevented ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," access."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," could handle these cases, and simply prevent access to such a\nbucket. However, we believe this defeats the purpose of ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," as an\nadministration and management tool for ",(0,i.jsx)(n.code,{children:"s3gw"}),"."]}),"\n",(0,i.jsxs)(n.h3,{id:"tweaking-s3gw-to-honor-cors-headers-except-for-the-s3gw-ui",children:["Tweaking ",(0,i.jsx)(n.code,{children:"s3gw"})," to honor CORS Headers except for the s3gw-ui"]}),"\n",(0,i.jsxs)(n.p,{children:["This option comes in line with the previous, but instead of always honoring all\nthe CORS headers, the ",(0,i.jsx)(n.code,{children:"s3gw"})," service would reply with custom CORS headers should\nthe request from the client browser provide some form of identification\nmechanism that would allow ",(0,i.jsx)(n.code,{children:"s3gw"})," to understand the request came from ",(0,i.jsx)(n.code,{children:"s3gw-ui"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"The main problem with this approach is that it is essentially a hack, and\nobscure."}),"\n",(0,i.jsx)(n.h3,{id:"s3gw-ui-specific-backend",children:"s3gw-ui specific Backend"}),"\n",(0,i.jsxs)(n.p,{children:["Another alternative is to have an ",(0,i.jsx)(n.code,{children:"s3gw-ui"}),"-specific backend, which acts much\nlike a proxy, but unlike a proxy it actually holds the logic to interact with\n",(0,i.jsx)(n.code,{children:"s3gw"}),". This backend is nothing more than a web server, serving the ",(0,i.jsx)(n.code,{children:"s3gw-ui"}),"'s\nUI (frontend) to the user's browser (",(0,i.jsx)(n.code,{children:"1"}),", ",(0,i.jsx)(n.code,{children:"2"}),"). Once loaded in the user's\nbrowser, the frontend will then issue REST calls to the backend (",(0,i.jsx)(n.code,{children:"3"}),") to perform\nits operations. These may trigger ",(0,i.jsx)(n.code,{children:"s3gw"})," calls from the backend (",(0,i.jsx)(n.code,{children:"4"}),", ",(0,i.jsx)(n.code,{children:"5"}),"),\nwhich will then reply back to the frontend (",(0,i.jsx)(n.code,{children:"6"}),")."]}),"\n",(0,i.jsx)(n.mermaid,{value:'flowchart LR\n    %%{init: {"flowchart": {"defaultRenderer": "elk"}} }%%\n    browser == 1 ==> container\n    subgraph cluster\n        direction TB\n        subgraph container[s3gw-ui]\n            direction TB\n            ui(Frontend)\n            backend(Backend)\n            ui -. served by ..-> backend\n        end\n        s3gw\n    end\n\n    backend == 2 ==> browser\n    browser == 3 ==> backend\n    backend == 4 ==> s3gw(s3gw) == 5 ==> backend == 6 ==> browser'}),"\n",(0,i.jsxs)(n.p,{children:["The major benefit of this approach is that it solves CORS for us: because the\nfrontend is being served by the same host it is calling on to perform its\noperations, the browser is not subject to ",(0,i.jsx)(n.code,{children:"s3gw"}),"-specific CORS policies. And the\nbackend is not subject to those same CORS policies because it is not a browser."]}),"\n",(0,i.jsxs)(n.p,{children:["There are pros and cons about this approach though. On the cons side, we have\nthe need to split the logic to interact with ",(0,i.jsx)(n.code,{children:"s3gw"})," from the frontend into the\nbackend; and we will have a new codebase to maintain. On the pros side, we not\nonly get rid of the CORS issue, but we can have the frontend issuing complex\noperations to the backend, which will then handle their complexity. Further, by\nsplitting the logic to interact with ",(0,i.jsx)(n.code,{children:"s3gw"})," to the backend, we can now support\nmanaging and administrating multiple ",(0,i.jsx)(n.code,{children:"s3gw"})," from the same frontend, and use a\ndifferent frontend than the one provided by ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," to manage ",(0,i.jsx)(n.code,{children:"s3gw"})," (as long\nas they interact with the ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," backend)."]}),"\n",(0,i.jsx)(n.mermaid,{value:'flowchart LR\n    %%{init: {"flowchart": {"defaultRenderer": "elk"}} }%%\n    browser == 1 ==> container\n    subgraph cluster\n        direction TB\n        subgraph container[s3gw-ui]\n            direction TB\n            ui(Frontend)\n            backend(Backend)\n            ui -. served by ..-> backend\n        end\n        s3gw1(s3gw_1)\n        s3gw2(s3gw_2)\n    end\n\n    backend == 2 ==> browser\n    browser == 3 ==> backend\n    backend == 4 ==> s3gw1 == 5 ==> backend == 6 ==> browser\n    browser == 7 ==> backend\n    backend == 8 ==> s3gw2 == 9 ==> backend == 10 ==> browser'}),"\n",(0,i.jsxs)(n.p,{children:["The diagram above is much like the previous diagram, but it shows two instances\nof ",(0,i.jsx)(n.code,{children:"s3gw"})," running on the cluster, with the user's browser being able to manage\nand administrate both from the same ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," instance."]}),"\n",(0,i.jsx)(n.h2,{id:"decision-outcome",children:"Decision Outcome"}),"\n",(0,i.jsxs)(n.p,{children:["Amongst the various options, the most versatile and flexible option is the\n",(0,i.jsx)(n.code,{children:"s3gw-ui"}),"-specific backend. Not only it allows us to circumvent the CORS issue\nwe have been facing, it also brings to the table more potential future\ndirections."]}),"\n",(0,i.jsx)(n.p,{children:"While the team is familiar with approaches and technologies for its\nimplementation, we are still faced with some challenges, discussed\nfurther down."}),"\n",(0,i.jsx)(n.h3,{id:"technologies",children:"Technologies"}),"\n",(0,i.jsxs)(n.p,{children:["Consensus was achieved around using Python as the implementation language for\nthe ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," backend, using ",(0,i.jsx)(n.code,{children:"FastAPI"})," as the web framework. We have had\nprevious experience with both during the ",(0,i.jsx)(n.code,{children:"Aquarium"})," project, and both are battle\ntested, production ready technologies. For the ",(0,i.jsx)(n.code,{children:"S3"})," dialect, ",(0,i.jsx)(n.code,{children:"boto3"})," seems to be\nthe best library to rely on."]}),"\n",(0,i.jsxs)(n.p,{children:["Communication between the user's browser and the ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," backend will be\nprotected by SSL, and user authentication will rely on JSON Web Tokens (JWT),\nwhich is trivial to implement with ",(0,i.jsx)(n.code,{children:"FastAPI"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Depending how we choose to implement user authentication with ",(0,i.jsx)(n.code,{children:"s3gw"}),", whether\ndirectly using ",(0,i.jsx)(n.code,{children:"AWS"})," credentials (current behavior) or by keeping those\ncredentials in the ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," backend and relying instead on ",(0,i.jsx)(n.code,{children:"s3gw-ui"}),"-specific\nusernames and passwords, we may also need to have some form of data store for\nsecrets. This data store becomes imperative in case we are managing multiple\n",(0,i.jsx)(n.code,{children:"s3gw"})," instances, given we will need to keep track of their addresses."]}),"\n",(0,i.jsxs)(n.p,{children:["For the development of the ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," backend, we will rely on ",(0,i.jsx)(n.code,{children:"black"})," for code\nformatting, ",(0,i.jsx)(n.code,{children:"pyright"})," as a static type checker, and ",(0,i.jsx)(n.code,{children:"tox"})," with ",(0,i.jsx)(n.code,{children:"pytest"})," for\ntests."]}),"\n",(0,i.jsx)(n.h3,{id:"behavior",children:"Behavior"}),"\n",(0,i.jsxs)(n.p,{children:["While the current ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," implementations talks to ",(0,i.jsx)(n.code,{children:"s3gw"})," using S3 dialect\nvia REST, we will now have an intermediary between the ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," frontend and\nthe ",(0,i.jsx)(n.code,{children:"s3gw"}),"; i.e., the ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," backend. In this case, it will be the ",(0,i.jsx)(n.code,{children:"s3gw-ui"}),"\nbackend that will communicate with ",(0,i.jsx)(n.code,{children:"s3gw"})," using the S3 dialect, via REST, while\nthe ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," frontend will communicate with the ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," backend using a\nspecific REST API dialect, tailored to the frontend's needs."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, lets assume the ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," frontend desires to know all buckets in\nthe system, the number of objects, and each bucket's total size. Currently,\nthis means performing several different operations to ",(0,i.jsx)(n.code,{children:"s3gw"}),", and processing\nthe results in the frontend. With the new approach, the ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," frontend\nwill simply ask its backend for this information in one single call (e.g.,\n",(0,i.jsx)(n.code,{children:"/bucket/statistics?buckets=all"}),"), and it will be the ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," backend's\nresponsibility to perform the needed operations to ",(0,i.jsx)(n.code,{children:"s3gw"})," to obtain the\nrelevant information."]}),"\n",(0,i.jsx)(n.h3,{id:"location",children:"Location"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," backend should be part of the ",(0,i.jsxs)(n.a,{href:"https://github.com/aquarist-labs/s3gw-ui/",children:[(0,i.jsx)(n.code,{children:"s3gw-ui"})," repository"]}),". The best\napproach for file organization within the repository is beyond the scope of this\ndocument."]}),"\n",(0,i.jsx)(n.h3,{id:"challenges",children:"Challenges"}),"\n",(0,i.jsx)(n.p,{children:"The main challenge will be to implement the backend from scratch, ensure its\ncorrectness, and create a new testing pipeline, as our commitment deadlines\napproaches."}),"\n",(0,i.jsx)(n.p,{children:"Additionally,"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["While ",(0,i.jsx)(n.code,{children:"FastAPI"})," packages are now available for openSUSE Tumbleweed, they are\nnot available for openSUSE Leap, on which our container builds are based. We\nwill have to rely on installing from the Python Package Index (PyPI)."]}),"\n",(0,i.jsxs)(n.li,{children:["Because the ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," frontend no longer communicates directly with ",(0,i.jsx)(n.code,{children:"s3gw"}),",\nand the ",(0,i.jsx)(n.code,{children:"s3gw-ui"})," backend requires user credentials to perform operations in\n",(0,i.jsx)(n.code,{children:"s3gw"}),", we will have to find a way to pass the user's credentials to the\n",(0,i.jsx)(n.code,{children:"s3gw-ui"})," backend."]}),"\n",(0,i.jsxs)(n.li,{children:["When managing multiple ",(0,i.jsx)(n.code,{children:"s3gw"})," instances, different ",(0,i.jsx)(n.code,{children:"s3gw"})," instances may have\n(and should have) different credentials and users. We will need to decide\nhow user credentials should be handled and managed, especially for\nadministrator roles that are intended to manage and administrate multiple\n",(0,i.jsx)(n.code,{children:"s3gw"})," instances."]}),"\n"]})]})}function l(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>d});var i=s(6540);const t={},o=i.createContext(t);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);